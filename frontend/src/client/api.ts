/* tslint:disable */
/* eslint-disable */
/**
 * Todo API
 * Productivity tool that allows users to organize, manage, and prioritize tasks
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * Todo Serializer
 * @export
 * @interface PatchedTodo
 */
export interface PatchedTodo {
    /**
     * 
     * @type {number}
     * @memberof PatchedTodo
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PatchedTodo
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedTodo
     */
    'description'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedTodo
     */
    'is_completed'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PatchedTodo
     */
    'due_date'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedTodo
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedTodo
     */
    'updated_at'?: string;
}
/**
 * Todo Serializer
 * @export
 * @interface Todo
 */
export interface Todo {
    /**
     * 
     * @type {number}
     * @memberof Todo
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Todo
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof Todo
     */
    'description'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Todo
     */
    'is_completed'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Todo
     */
    'due_date'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Todo
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof Todo
     */
    'updated_at': string;
}

/**
 * TodosApi - axios parameter creator
 * @export
 */
export const TodosApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Todo View Set
         * @param {Todo} todo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todosCreate: async (todo: Todo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'todo' is not null or undefined
            assertParamExists('todosCreate', 'todo', todo)
            const localVarPath = `/api/todos/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(todo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Todo View Set
         * @param {number} id A unique integer value identifying this todo.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todosDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('todosDestroy', 'id', id)
            const localVarPath = `/api/todos/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Todo View Set
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todosList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/todos/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Todo View Set
         * @param {number} id A unique integer value identifying this todo.
         * @param {PatchedTodo} [patchedTodo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todosPartialUpdate: async (id: number, patchedTodo?: PatchedTodo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('todosPartialUpdate', 'id', id)
            const localVarPath = `/api/todos/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedTodo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Todo View Set
         * @param {number} id A unique integer value identifying this todo.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todosRetrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('todosRetrieve', 'id', id)
            const localVarPath = `/api/todos/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Todo View Set
         * @param {number} id A unique integer value identifying this todo.
         * @param {Todo} todo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todosUpdate: async (id: number, todo: Todo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('todosUpdate', 'id', id)
            // verify required parameter 'todo' is not null or undefined
            assertParamExists('todosUpdate', 'todo', todo)
            const localVarPath = `/api/todos/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(todo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TodosApi - functional programming interface
 * @export
 */
export const TodosApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TodosApiAxiosParamCreator(configuration)
    return {
        /**
         * Todo View Set
         * @param {Todo} todo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async todosCreate(todo: Todo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Todo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.todosCreate(todo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TodosApi.todosCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Todo View Set
         * @param {number} id A unique integer value identifying this todo.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async todosDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.todosDestroy(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TodosApi.todosDestroy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Todo View Set
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async todosList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Todo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.todosList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TodosApi.todosList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Todo View Set
         * @param {number} id A unique integer value identifying this todo.
         * @param {PatchedTodo} [patchedTodo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async todosPartialUpdate(id: number, patchedTodo?: PatchedTodo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Todo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.todosPartialUpdate(id, patchedTodo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TodosApi.todosPartialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Todo View Set
         * @param {number} id A unique integer value identifying this todo.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async todosRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Todo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.todosRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TodosApi.todosRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Todo View Set
         * @param {number} id A unique integer value identifying this todo.
         * @param {Todo} todo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async todosUpdate(id: number, todo: Todo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Todo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.todosUpdate(id, todo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TodosApi.todosUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TodosApi - factory interface
 * @export
 */
export const TodosApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TodosApiFp(configuration)
    return {
        /**
         * Todo View Set
         * @param {Todo} todo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todosCreate(todo: Todo, options?: RawAxiosRequestConfig): AxiosPromise<Todo> {
            return localVarFp.todosCreate(todo, options).then((request) => request(axios, basePath));
        },
        /**
         * Todo View Set
         * @param {number} id A unique integer value identifying this todo.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todosDestroy(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.todosDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Todo View Set
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todosList(options?: RawAxiosRequestConfig): AxiosPromise<Array<Todo>> {
            return localVarFp.todosList(options).then((request) => request(axios, basePath));
        },
        /**
         * Todo View Set
         * @param {number} id A unique integer value identifying this todo.
         * @param {PatchedTodo} [patchedTodo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todosPartialUpdate(id: number, patchedTodo?: PatchedTodo, options?: RawAxiosRequestConfig): AxiosPromise<Todo> {
            return localVarFp.todosPartialUpdate(id, patchedTodo, options).then((request) => request(axios, basePath));
        },
        /**
         * Todo View Set
         * @param {number} id A unique integer value identifying this todo.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todosRetrieve(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Todo> {
            return localVarFp.todosRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Todo View Set
         * @param {number} id A unique integer value identifying this todo.
         * @param {Todo} todo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todosUpdate(id: number, todo: Todo, options?: RawAxiosRequestConfig): AxiosPromise<Todo> {
            return localVarFp.todosUpdate(id, todo, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TodosApi - object-oriented interface
 * @export
 * @class TodosApi
 * @extends {BaseAPI}
 */
export class TodosApi extends BaseAPI {
    /**
     * Todo View Set
     * @param {Todo} todo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodosApi
     */
    public todosCreate(todo: Todo, options?: RawAxiosRequestConfig) {
        return TodosApiFp(this.configuration).todosCreate(todo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Todo View Set
     * @param {number} id A unique integer value identifying this todo.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodosApi
     */
    public todosDestroy(id: number, options?: RawAxiosRequestConfig) {
        return TodosApiFp(this.configuration).todosDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Todo View Set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodosApi
     */
    public todosList(options?: RawAxiosRequestConfig) {
        return TodosApiFp(this.configuration).todosList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Todo View Set
     * @param {number} id A unique integer value identifying this todo.
     * @param {PatchedTodo} [patchedTodo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodosApi
     */
    public todosPartialUpdate(id: number, patchedTodo?: PatchedTodo, options?: RawAxiosRequestConfig) {
        return TodosApiFp(this.configuration).todosPartialUpdate(id, patchedTodo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Todo View Set
     * @param {number} id A unique integer value identifying this todo.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodosApi
     */
    public todosRetrieve(id: number, options?: RawAxiosRequestConfig) {
        return TodosApiFp(this.configuration).todosRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Todo View Set
     * @param {number} id A unique integer value identifying this todo.
     * @param {Todo} todo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodosApi
     */
    public todosUpdate(id: number, todo: Todo, options?: RawAxiosRequestConfig) {
        return TodosApiFp(this.configuration).todosUpdate(id, todo, options).then((request) => request(this.axios, this.basePath));
    }
}



